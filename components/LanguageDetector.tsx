'use client'

import React, { createContext, useContext, useState, useEffect } from 'react'

// Language context
export const LanguageContext = createContext<{
  language: string
  setLanguage: (lang: string) => void
  t: (key: string) => string
  availableLanguages: Array<{ code: string; label: string; flag: string }>
}>({
  language: 'en',
  setLanguage: () => {},
  t: (key: string) => key,
  availableLanguages: []
})

// Available languages
const availableLanguages = [
  { code: 'en', label: 'English', flag: 'ЁЯЗ║ЁЯЗ╕' },
  { code: 'hi', label: 'рд╣рд┐рдВрджреА', flag: 'ЁЯЗоЁЯЗ│' },
  { code: 'gu', label: 'ркЧрлБркЬрк░рк╛ркдрлА', flag: 'ЁЯЗоЁЯЗ│' },
  { code: 'mr', label: 'рдорд░рд╛рдареА', flag: 'ЁЯЗоЁЯЗ│' },
  { code: 'bn', label: 'ржмрж╛ржВрж▓рж╛', flag: 'ЁЯЗоЁЯЗ│' },
  { code: 'ta', label: 'родрооро┐ро┤рпН', flag: 'ЁЯЗоЁЯЗ│' },
  { code: 'te', label: 'р░др▒Жр░▓р▒Бр░Чр▒Б', flag: 'ЁЯЗоЁЯЗ│' },
  { code: 'kn', label: 'р▓Хр▓ир│Нр▓ир▓б', flag: 'ЁЯЗоЁЯЗ│' },
  { code: 'ml', label: 'р┤ор┤▓р┤пр┤╛р┤│р┤В', flag: 'ЁЯЗоЁЯЗ│' },
  { code: 'pa', label: 'рикрй░риЬри╛римрйА', flag: 'ЁЯЗоЁЯЗ│' }
]

// Simple translation object for demonstration
const translations: Record<string, Record<string, string>> = {
  en: {
    // Home page
    'home.title': 'VillageVibe',
    'home.subtitle': 'Discover authentic rural India. Book unique village stays, support local communities, and experience real cultureтАФno middlemen, just meaningful journeys.',
    'home.explore': 'Explore Villages',
    'home.host': 'Become a Host',
    'home.featured': 'Featured Villages & Experiences',
    'home.viewMore': 'View More',
    
    // Navigation
    'nav.home': 'Home',
    'nav.explore': 'Explore',
    'nav.experiences': 'Experiences',
    'nav.about': 'About',
    'nav.dashboard': 'Dashboard',
    'nav.bookings': 'My Bookings',
    'nav.signin': 'Sign In',
    'nav.signup': 'Sign Up',
    'nav.logout': 'Logout',
    'nav.profile': 'Profile',
    
    // Common buttons
    'btn.bookNow': 'Book Now',
    'btn.viewDetails': 'View Details',
    'btn.submit': 'Submit',
    'btn.cancel': 'Cancel',
    'btn.next': 'Next',
    'btn.previous': 'Previous',
    'btn.save': 'Save',
    'btn.edit': 'Edit',
    'btn.delete': 'Delete',
    'btn.search': 'Search',
    'btn.filter': 'Filter',
    'btn.clear': 'Clear',
    
    // Form labels
    'form.name': 'Full Name',
    'form.email': 'Email Address',
    'form.phone': 'Phone Number',
    'form.village': 'Village Name',
    'form.state': 'State',
    'form.description': 'Description',
    'form.price': 'Price per Night',
    'form.capacity': 'Maximum Guests',
    'form.checkin': 'Check-in Date',
    'form.checkout': 'Check-out Date',
    'form.guests': 'Number of Guests',
    'form.required': 'Required',
    
    // Status messages
    'status.loading': 'Loading...',
    'status.success': 'Success!',
    'status.error': 'Error occurred',
    'status.noResults': 'No results found',
    'status.bookingConfirmed': 'Booking confirmed!',
    'status.paymentSuccess': 'Payment successful!',
    
    // Dashboard
    'dashboard.welcome': 'Welcome back',
    'dashboard.overview': 'Overview',
    'dashboard.bookings': 'My Bookings',
    'dashboard.favorites': 'Favorites',
    'dashboard.profile': 'Profile',
    'dashboard.totalTrips': 'Total Trips',
    'dashboard.totalSpent': 'Total Spent',
    'dashboard.upcomingTrips': 'Upcoming Trips',
    
    // AI Planner
    'ai.title': 'AI Travel Planner',
    'ai.subtitle': 'Get personalized village tourism plans powered by artificial intelligence',
    'ai.planTrip': 'Plan My Trip',
    'ai.generating': 'AI is Planning Your Trip...',
    'ai.planning': 'Planning...',
    'ai.ready': 'Your Plan is Ready!',
    'ai.bookNow': 'Book This Plan',
    'ai.sharePlan': 'Share Plan',
    'ai.savePlan': 'Save Plan',
    'ai.createNew': 'Create New Plan',
    'ai.itinerary': 'Your Itinerary',
    'ai.culturalInsights': 'Cultural Insights',
    'ai.recommendations': 'AI Recommendations',
    'ai.realTimeData': 'Real-time Data',
    'ai.availability': 'Availability',
    'ai.demand': 'Demand Level',
    'ai.seasonalPricing': 'Seasonal Pricing',
    'ai.lastUpdated': 'Last Updated',
    
    // Host dashboard
    'host.dashboard.title': 'Host Dashboard',
    'host.dashboard.subtitle': 'Manage your listings and bookings',
    'host.addListing': 'Add New Listing',
    'host.listings': 'My Listings',
    'host.analytics': 'Analytics',
    'host.totalRevenue': 'Total Revenue',
    'host.totalBookings': 'Total Bookings',
    'host.activeListings': 'Active Listings',
    
    // Explore page
    'explore.title': 'Explore Authentic Village Experiences',
    'explore.subtitle': 'Discover real India through direct connections with rural communities. No middlemen, just authentic experiences.',
    'explore.searchPlaceholder': 'Search villages or experiences...',
    'explore.allStates': 'All States',
    'explore.allExperiences': 'All Experiences',
  },
  hi: {
    'home.title': 'рд╡рд┐рд▓реЗрдЬрд╡рд╛рдЗрдм',
    'home.subtitle': 'рдкреНрд░рд╛рдорд╛рдгрд┐рдХ рдЧреНрд░рд╛рдореАрдг рднрд╛рд░рдд рдХреА рдЦреЛрдЬ рдХрд░реЗрдВред',
    'home.explore': 'рдЧрд╛рдВрд╡реЛрдВ рдХреА рдЦреЛрдЬ рдХрд░реЗрдВ',
    'home.host': 'рд╣реЛрд╕реНрдЯ рдмрдиреЗрдВ',
    'nav.home': 'рд╣реЛрдо',
    'nav.explore': 'рдЦреЛрдЬреЗрдВ',
    'nav.experiences': 'рдЕрдиреБрднрд╡',
    'nav.about': 'рд╣рдорд╛рд░реЗ рдмрд╛рд░реЗ рдореЗрдВ',
    'nav.dashboard': 'рдбреИрд╢рдмреЛрд░реНрдб',
    'nav.bookings': 'рдореЗрд░реА рдмреБрдХрд┐рдВрдЧ',
    'nav.signin': 'рд╕рд╛рдЗрди рдЗрди',
    'nav.signup': 'рд╕рд╛рдЗрди рдЕрдк',
    'nav.logout': 'рд▓реЙрдЧрдЖрдЙрдЯ',
    'nav.profile': 'рдкреНрд░реЛрдлрд╛рдЗрд▓',
    'btn.bookNow': 'рдЕрднреА рдмреБрдХ рдХрд░реЗрдВ',
    'btn.viewDetails': 'рд╡рд┐рд╡рд░рдг рджреЗрдЦреЗрдВ',
    'btn.submit': 'рд╕рдмрдорд┐рдЯ рдХрд░реЗрдВ',
    'btn.cancel': 'рд░рджреНрдж рдХрд░реЗрдВ',
    'btn.next': 'рдЕрдЧрд▓рд╛',
    'btn.previous': 'рдкрд┐рдЫрд▓рд╛',
    'btn.save': 'рд╕рд╣реЗрдЬреЗрдВ',
    'btn.edit': 'рд╕рдВрдкрд╛рджрд┐рдд рдХрд░реЗрдВ',
    'btn.delete': 'рд╣рдЯрд╛рдПрдВ',
    'btn.search': 'рдЦреЛрдЬреЗрдВ',
    'btn.filter': 'рдлрд╝рд┐рд▓реНрдЯрд░',
    'btn.clear': 'рд╕рд╛рдлрд╝ рдХрд░реЗрдВ',
    'form.name': 'рдкреВрд░рд╛ рдирд╛рдо',
    'form.email': 'рдИрдореЗрд▓ рдкрддрд╛',
    'form.phone': 'рдлрд╝реЛрди рдирдВрдмрд░',
    'form.village': 'рдЧрд╛рдВрд╡ рдХрд╛ рдирд╛рдо',
    'form.state': 'рд░рд╛рдЬреНрдп',
    'form.description': 'рд╡рд┐рд╡рд░рдг',
    'form.price': 'рдкреНрд░рддрд┐ рд░рд╛рдд рдХреАрдордд',
    'form.capacity': 'рдЕрдзрд┐рдХрддрдо рдореЗрд╣рдорд╛рди',
    'form.checkin': 'рдЪреЗрдХ-рдЗрди рддрд┐рдерд┐',
    'form.checkout': 'рдЪреЗрдХ-рдЖрдЙрдЯ рддрд┐рдерд┐',
    'form.guests': 'рдореЗрд╣рдорд╛рдиреЛрдВ рдХреА рд╕рдВрдЦреНрдпрд╛',
    'form.required': 'рдЖрд╡рд╢реНрдпрдХ',
    'status.loading': 'рд▓реЛрдб рд╣реЛ рд░рд╣рд╛ рд╣реИ...',
    'status.success': 'рд╕рдлрд▓!',
    'status.error': 'рддреНрд░реБрдЯрд┐ рд╣реБрдИ',
    'status.noResults': 'рдХреЛрдИ рдкрд░рд┐рдгрд╛рдо рдирд╣реАрдВ рдорд┐рд▓рд╛',
    'status.bookingConfirmed': 'рдмреБрдХрд┐рдВрдЧ рдХреА рдкреБрд╖реНрдЯрд┐ рд╣реБрдИ!',
    'status.paymentSuccess': 'рднреБрдЧрддрд╛рди рд╕рдлрд▓!',
    'dashboard.welcome': 'рд╡рд╛рдкрд╕реА рдкрд░ рд╕реНрд╡рд╛рдЧрдд рд╣реИ',
    'dashboard.overview': 'рдЕрд╡рд▓реЛрдХрди',
    'dashboard.bookings': 'рдореЗрд░реА рдмреБрдХрд┐рдВрдЧ',
    'dashboard.favorites': 'рдкрд╕рдВрджреАрджрд╛',
    'dashboard.profile': 'рдкреНрд░реЛрдлрд╛рдЗрд▓',
    'dashboard.totalTrips': 'рдХреБрд▓ рдпрд╛рддреНрд░рд╛рдПрдВ',
    'dashboard.totalSpent': 'рдХреБрд▓ рдЦрд░реНрдЪ',
    'dashboard.upcomingTrips': 'рдЖрдЧрд╛рдореА рдпрд╛рддреНрд░рд╛рдПрдВ',
    'host.dashboard.title': 'рд╣реЛрд╕реНрдЯ рдбреИрд╢рдмреЛрд░реНрдб',
    'host.dashboard.subtitle': 'рдЕрдкрдиреА рд▓рд┐рд╕реНрдЯрд┐рдВрдЧ рдФрд░ рдмреБрдХрд┐рдВрдЧ рдкреНрд░рдмрдВрдзрд┐рдд рдХрд░реЗрдВ',
    'host.addListing': 'рдирдИ рд▓рд┐рд╕реНрдЯрд┐рдВрдЧ рдЬреЛрдбрд╝реЗрдВ',
    'host.listings': 'рдореЗрд░реА рд▓рд┐рд╕реНрдЯрд┐рдВрдЧ',
    'host.analytics': 'рд╡рд┐рд╢реНрд▓реЗрд╖рдг',
    'host.totalRevenue': 'рдХреБрд▓ рд░рд╛рдЬрд╕реНрд╡',
    'host.totalBookings': 'рдХреБрд▓ рдмреБрдХрд┐рдВрдЧ',
    'host.activeListings': 'рд╕рдХреНрд░рд┐рдп рд▓рд┐рд╕реНрдЯрд┐рдВрдЧ',
    'explore.title': 'рдкреНрд░рд╛рдорд╛рдгрд┐рдХ рдЧреНрд░рд╛рдореАрдг рдЕрдиреБрднрд╡реЛрдВ рдХреА рдЦреЛрдЬ рдХрд░реЗрдВ',
    'explore.subtitle': 'рдЧреНрд░рд╛рдореАрдг рд╕рдореБрджрд╛рдпреЛрдВ рдХреЗ рд╕рд╛рде рд╕реАрдзреЗ рд╕рдВрдмрдВрдзреЛрдВ рдХреЗ рдорд╛рдзреНрдпрдо рд╕реЗ рд╡рд╛рд╕реНрддрд╡рд┐рдХ рднрд╛рд░рдд рдХреА рдЦреЛрдЬ рдХрд░реЗрдВред рдХреЛрдИ рдмрд┐рдЪреМрд▓рд┐рдпрд╛ рдирд╣реАрдВ, рд╕рд┐рд░реНрдл рдкреНрд░рд╛рдорд╛рдгрд┐рдХ рдЕрдиреБрднрд╡ред',
    'explore.searchPlaceholder': 'рдЧрд╛рдВрд╡реЛрдВ рдпрд╛ рдЕрдиреБрднрд╡реЛрдВ рдХреА рдЦреЛрдЬ рдХрд░реЗрдВ...',
    'explore.allStates': 'рд╕рднреА рд░рд╛рдЬреНрдп',
    'explore.allExperiences': 'рд╕рднреА рдЕрдиреБрднрд╡',
  }
}

// Language provider component
export const LanguageProvider = ({ children }: { children: React.ReactNode }) => {
  const [language, setLanguageState] = useState('en')

  const setLanguage = (lang: string) => {
    // Restrict to English for now; other languages are coming soon
    if (lang !== 'en') {
      return
    }
    setLanguageState('en')
    localStorage.setItem('language', 'en')
    document.documentElement.lang = 'en'
  }

  useEffect(() => {
    const savedLanguage = localStorage.getItem('language') || 'en'
    const normalized = savedLanguage === 'en' ? 'en' : 'en'
    setLanguageState(normalized)
    document.documentElement.lang = normalized
  }, [])

  const t = (key: string): string => {
    return translations[language]?.[key] || translations['en']?.[key] || key
  }

  return (
    <LanguageContext.Provider value={{ language, setLanguage, t, availableLanguages }}>
      {children}
    </LanguageContext.Provider>
  )
}

// Hook to use translations
export function useTranslation() {
  const context = useContext(LanguageContext)
  if (!context) {
    throw new Error('useTranslation must be used within a LanguageProvider')
  }

  function t(key: string): string {
    return context.t(key)
  }

  return { t, language: context.language, setLanguage: context.setLanguage }
}

// Language detector component
const LanguageDetector = () => {
  const { language, setLanguage } = useTranslation()
  const [showLanguageMenu, setShowLanguageMenu] = useState(false)

  const handleLanguageChange = (langCode: string) => {
    if (langCode !== 'en') {
      alert('Feature coming soon')
      setShowLanguageMenu(false)
      return
    }
    setLanguage('en')
    setShowLanguageMenu(false)
  }

  const getCurrentLanguageInfo = () => {
    return availableLanguages.find(lang => lang.code === language) || availableLanguages[0]
  }

  return (
    <div className="relative">
      <button
        onClick={() => setShowLanguageMenu(!showLanguageMenu)}
        className="flex items-center gap-2 px-3 py-2 bg-white border border-earth-200 rounded-lg hover:bg-earth-50 transition-colors"
      >
        <span className="text-sm font-medium text-earth-700">
          {getCurrentLanguageInfo().label}
        </span>
        <span className="text-lg">{getCurrentLanguageInfo().flag}</span>
      </button>

      {showLanguageMenu && (
        <div className="absolute top-full right-0 mt-1 bg-white border border-earth-200 rounded-lg shadow-lg z-50 min-w-[200px]">
          {availableLanguages.map((lang) => (
            <button
              key={lang.code}
              onClick={() => handleLanguageChange(lang.code)}
              className={`w-full flex items-center gap-3 px-4 py-2 text-left hover:bg-earth-50 transition-colors ${
                language === lang.code ? 'bg-primary-50 text-primary-700' : 'text-earth-700'
              }`}
            >
              <span className="text-lg">{lang.flag}</span>
              <span className="text-sm font-medium">{lang.label}</span>
            </button>
          ))}
        </div>
      )}
    </div>
  )
}

export default LanguageDetector 